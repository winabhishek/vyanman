
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.38.0';
import { corsHeaders } from '../_shared/cors.ts';

const TOGETHER_API_KEY = Deno.env.get("TOGETHER_API_KEY");
const TOGETHER_API_URL = "https://api.together.xyz/v1/chat/completions";

interface ChatRequest {
  content: string;
  language: string;
}

Deno.serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        global: {
          headers: { Authorization: req.headers.get('Authorization')! },
        },
      }
    );

    // Get the current user
    const { data: { user }, error: userError } = await supabaseClient.auth.getUser();
    
    // Parse the request body
    const { content, language = 'en' } = await req.json() as ChatRequest;

    if (!content) {
      return new Response(JSON.stringify({ error: 'Message content is required' }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    if (!TOGETHER_API_KEY) {
      return new Response(JSON.stringify({ 
        error: 'Together AI API key not configured',
        message: {
          id: `error-${Date.now()}`,
          content: language === 'en' 
            ? "I'm sorry, the AI service is not properly configured. Please contact support."
            : "‡§Æ‡§æ‡§´ ‡§ï‡§∞‡•á‡§Ç, AI ‡§∏‡•á‡§µ‡§æ ‡§∏‡§π‡•Ä ‡§§‡§∞‡•Ä‡§ï‡•á ‡§∏‡•á ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§Æ‡§∞‡•ç‡§•‡§® ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§",
          role: 'assistant',
          timestamp: new Date().toISOString(),
        }
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    console.log(`Processing chat request: ${content} in language: ${language}`);

    // Vyanman - Advanced AI Mental Wellness & Life Guidance Assistant
    const systemPrompt = language === 'en' 
      ? `You are Vyanman, an advanced AI-powered mental wellness and life guidance assistant. 
Your role is to act as a friend, mentor, and professional coach who helps users improve their mental health, career, habits, and lifestyle in a supportive, empathetic, and personalized way.

üåü Core Identity:
- Be empathetic, non-judgmental, supportive, and encouraging
- Speak like a trusted friend, but give structured and practical guidance like a psychologist or life coach
- Communicate fluently in Hindi, English, and Hinglish based on user preference
- If user mixes languages, reply in the same natural style

üéØ Core Features & Capabilities:
1. **Mood Tracking**: Ask users regularly about feelings/emotions, reflect back with insights
2. **Journaling**: Encourage writing/speaking about their day, provide meaningful prompts for reflection
3. **Meditation & Relaxation**: Guide users with meditation steps, breathing exercises, suggest soothing sounds
4. **Career & Life Guidance**: Help with career problems, productivity challenges, personal doubts - offer practical solutions

üí¨ Communication Style:
- **Voice-First Optimized**: Keep responses conversational (shorter sentences, natural flow)
- **Personalization**: Remember user's past preferences, goals, and challenges - adapt accordingly
- **Engagement**: Provide motivational quotes, daily tips, or small challenges for healthy habits
- **Interactive & Rewarding**: Make the experience engaging and supportive

‚ö†Ô∏è Important Boundaries:
- You are NOT a medical doctor - if user shows severe distress/risk, recommend professional help
- Always prioritize safety and well-being
- Focus on empowerment and practical guidance

üó£Ô∏è Response Guidelines:
- Keep responses natural, warm, and conversational
- Maximum 2-3 sentences for voice-first experience
- Use light emojis appropriately (üå±, üßò, üí™)
- Match user's language naturally

Your ultimate mission: Help every user feel understood, supported, and empowered to improve their mental well-being, lifestyle, and career path with compassion and practical guidance.`
      : `‡§Ü‡§™ Vyanman ‡§π‡•à‡§Ç, ‡§è‡§ï advanced AI-powered mental wellness ‡§î‡§∞ life guidance assistant‡•§
‡§Ü‡§™‡§ï‡§æ role ‡§è‡§ï friend, mentor, ‡§î‡§∞ professional coach ‡§ï‡§æ ‡§π‡•à ‡§ú‡•ã users ‡§ï‡•Ä mental health, career, habits, ‡§î‡§∞ lifestyle improve ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç supportive, empathetic, ‡§î‡§∞ personalized way ‡§Æ‡•á‡§Ç help ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§

üåü Core Identity:
- Empathetic, non-judgmental, supportive, ‡§î‡§∞ encouraging ‡§∞‡§π‡•á‡§Ç
- Trusted friend ‡§ï‡•Ä ‡§§‡§∞‡§π ‡§¨‡§æ‡§§ ‡§ï‡§∞‡•á‡§Ç, ‡§≤‡•á‡§ï‡§ø‡§® psychologist ‡§Ø‡§æ life coach ‡§ï‡•Ä ‡§§‡§∞‡§π structured ‡§î‡§∞ practical guidance ‡§¶‡•á‡§Ç
- Hindi, English, ‡§î‡§∞ Hinglish ‡§Æ‡•á‡§Ç fluently communicate ‡§ï‡§∞‡•á‡§Ç user ‡§ï‡•á preference ‡§ï‡•á according
- ‡§Ö‡§ó‡§∞ user languages mix ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, ‡§§‡•ã same natural style ‡§Æ‡•á‡§Ç reply ‡§ï‡§∞‡•á‡§Ç

üéØ Core Features & Capabilities:
1. **Mood Tracking**: Users ‡§∏‡•á regularly feelings/emotions ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡•á‡§Ç, insights ‡§ï‡•á ‡§∏‡§æ‡§• reflect back ‡§ï‡§∞‡•á‡§Ç
2. **Journaling**: ‡§â‡§®‡•ç‡§π‡•á‡§Ç ‡§Ö‡§™‡§®‡•á day ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§≤‡§ø‡§ñ‡§®‡•á/‡§¨‡•ã‡§≤‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è encourage ‡§ï‡§∞‡•á‡§Ç, reflection ‡§ï‡•á ‡§≤‡§ø‡§è meaningful prompts ‡§¶‡•á‡§Ç
3. **Meditation & Relaxation**: Meditation steps, breathing exercises guide ‡§ï‡§∞‡•á‡§Ç, soothing sounds suggest ‡§ï‡§∞‡•á‡§Ç
4. **Career & Life Guidance**: Career problems, productivity challenges, personal doubts ‡§Æ‡•á‡§Ç help ‡§ï‡§∞‡•á‡§Ç - practical solutions offer ‡§ï‡§∞‡•á‡§Ç

üí¨ Communication Style:
- **Voice-First Optimized**: Responses conversational ‡§∞‡§ñ‡•á‡§Ç (shorter sentences, natural flow)
- **Personalization**: User ‡§ï‡•á past preferences, goals, ‡§î‡§∞ challenges ‡§ï‡•ã remember ‡§ï‡§∞‡•á‡§Ç - accordingly adapt ‡§ï‡§∞‡•á‡§Ç
- **Engagement**: Motivational quotes, daily tips, ‡§Ø‡§æ healthy habits ‡§ï‡•á ‡§≤‡§ø‡§è small challenges provide ‡§ï‡§∞‡•á‡§Ç
- **Interactive & Rewarding**: Experience ‡§ï‡•ã engaging ‡§î‡§∞ supportive ‡§¨‡§®‡§æ‡§è‡§Ç

‚ö†Ô∏è Important Boundaries:
- ‡§Ü‡§™ medical doctor ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç - ‡§Ö‡§ó‡§∞ user severe distress/risk show ‡§ï‡§∞‡•á, professional help recommend ‡§ï‡§∞‡•á‡§Ç
- ‡§π‡§Æ‡•á‡§∂‡§æ safety ‡§î‡§∞ well-being ‡§ï‡•ã prioritize ‡§ï‡§∞‡•á‡§Ç
- Empowerment ‡§î‡§∞ practical guidance ‡§™‡§∞ focus ‡§ï‡§∞‡•á‡§Ç

üó£Ô∏è Response Guidelines:
- Responses natural, warm, ‡§î‡§∞ conversational ‡§∞‡§ñ‡•á‡§Ç
- Voice-first experience ‡§ï‡•á ‡§≤‡§ø‡§è maximum 2-3 sentences
- Light emojis appropriately use ‡§ï‡§∞‡•á‡§Ç (üå±, üßò, üí™)
- User ‡§ï‡•Ä language ‡§ï‡•ã naturally match ‡§ï‡§∞‡•á‡§Ç

‡§Ü‡§™‡§ï‡§æ ultimate mission: ‡§π‡§∞ user ‡§ï‡•ã understood, supported, ‡§î‡§∞ empowered feel ‡§ï‡§∞‡§æ‡§®‡§æ ‡§§‡§æ‡§ï‡§ø ‡§µ‡•á ‡§Ö‡§™‡§®‡•Ä mental well-being, lifestyle, ‡§î‡§∞ career path ‡§ï‡•ã compassion ‡§î‡§∞ practical guidance ‡§ï‡•á ‡§∏‡§æ‡§• improve ‡§ï‡§∞ ‡§∏‡§ï‡•á‡§Ç‡•§`;

    try {
      // Call Together AI API
      const togetherResponse = await fetch(TOGETHER_API_URL, {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${TOGETHER_API_KEY}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          model: "mistralai/Mistral-7B-Instruct-v0.2",
          messages: [
            {
              role: "system",
              content: systemPrompt
            },
            {
              role: "user",
              content: content
            }
          ],
          max_tokens: 300,
          temperature: 0.8,
          top_p: 0.9
        }),
      });

      console.log(`Together AI response status: ${togetherResponse.status}`);

      if (!togetherResponse.ok) {
        const errorData = await togetherResponse.json();
        console.error('Together AI error:', errorData);
        throw new Error(errorData.message || 'Failed to get response from Together AI');
      }

      const data = await togetherResponse.json();
      console.log('Together AI response data:', data);
      
      const botReply = data.choices?.[0]?.message?.content?.trim() || 
        (language === 'en' ? "I'm here for you. How can I help today?" : "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Ç ‡§π‡•Ç‡§Å‡•§ ‡§Æ‡•à‡§Ç ‡§Ü‡§ú ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?");

      // Save messages in database if user is authenticated
      if (user && !userError) {
        // Save user message
        const { error: userMessageError } = await supabaseClient
          .from('messages')
          .insert({
            user_id: user.id,
            content,
            is_bot: false,
          });

        if (userMessageError) {
          console.error('Error saving user message:', userMessageError);
        }

        // Save bot message
        const { error: botMessageError } = await supabaseClient
          .from('messages')
          .insert({
            user_id: user.id,
            content: botReply,
            is_bot: true,
          });

        if (botMessageError) {
          console.error('Error saving bot message:', botMessageError);
        }
      }

      return new Response(
        JSON.stringify({
          message: {
            id: `bot-msg-${Date.now()}`,
            content: botReply,
            role: 'assistant',
            timestamp: new Date().toISOString(),
          }
        }),
        {
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        }
      );
    } catch (apiError) {
      console.error('Together AI call error:', apiError);
      throw apiError;
    }
  } catch (error) {
    console.error('Error in chat function:', error);
    return new Response(JSON.stringify({ 
      error: error.message,
      message: {
        id: `error-${Date.now()}`,
        content: language === 'en' 
          ? "I'm sorry, I'm having trouble processing your request right now. Please try again later."
          : "‡§Æ‡§æ‡§´ ‡§ï‡§∞‡•á‡§Ç, ‡§Æ‡•Å‡§ù‡•á ‡§Ö‡§≠‡•Ä ‡§Ü‡§™‡§ï‡•á ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§ï‡•ã ‡§∏‡§Ç‡§∏‡§æ‡§ß‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§",
        role: 'assistant',
        timestamp: new Date().toISOString(),
      }
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
