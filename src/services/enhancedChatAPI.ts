
import { supabase } from '../supabaseClient';
import { Message } from '../types';
import { toast } from '@/hooks/use-toast';
import { v4 as uuidv4 } from 'uuid';

const detectLanguage = (text: string): 'en' | 'hi' => {
  const hindiPattern = /[\u0900-\u097F\u0980-\u09FF]/;
  const hinglishKeywords = /\b(yaar|bhai|hai|nahi|kya|main|mera|tera|bahut|thoda|bilkul|sach|ghar|kaam|time|feel|kar|ho|hoon|hota|hoti|lagta|lagti)\b/i;
  
  // If contains Hindi script, it's Hindi
  if (hindiPattern.test(text)) return 'hi';
  
  // If contains common Hinglish words, treat as Hindi to get bilingual response
  if (hinglishKeywords.test(text)) return 'hi';
  
  return 'en';
};

const analyzeUserEmotion = (content: string): string => {
  content = content.toLowerCase();
  
  if (content.includes('sad') || content.includes('depressed') || content.includes('‡§â‡§¶‡§æ‡§∏') || content.includes('‡§¶‡•Å‡§ñ‡•Ä')) {
    return 'sad';
  } else if (content.includes('anxious') || content.includes('worried') || content.includes('‡§ö‡§ø‡§Ç‡§§‡§æ') || content.includes('‡§ò‡§¨‡§∞‡§æ‡§π‡§ü')) {
    return 'anxious';
  } else if (content.includes('angry') || content.includes('frustrated') || content.includes('‡§ó‡•Å‡§∏‡•ç‡§∏‡§æ') || content.includes('‡§™‡§∞‡•á‡§∂‡§æ‡§®')) {
    return 'angry';
  } else if (content.includes('happy') || content.includes('good') || content.includes('‡§ñ‡•Å‡§∂') || content.includes('‡§Ö‡§ö‡•ç‡§õ‡§æ')) {
    return 'happy';
  } else if (content.includes('stressed') || content.includes('overwhelmed') || content.includes('‡§§‡§®‡§æ‡§µ') || content.includes('‡§¶‡§¨‡§æ‡§µ')) {
    return 'stressed';
  }
  return 'neutral';
};

const generatePersonalizedResponse = (content: string, emotion: string, language: string = 'en'): string => {
  if (language === 'en') {
    switch (emotion) {
      case 'sad':
        return `‡§Æ‡•à‡§Ç ‡§∏‡§Æ‡§ù ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç ‡§ï‡§ø ‡§Ø‡•á ‡§ï‡§ø‡§§‡§®‡§æ ‡§ï‡§†‡§ø‡§® ‡§≤‡§ó ‡§∞‡§π‡§æ ‡§π‡•ã‡§ó‡§æ‡•§ Your feelings are completely valid, ‡§î‡§∞ ‡§Æ‡•à‡§Ç ‡§Ø‡§π‡§æ‡§Ç ‡§π‡•Ç‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§∏‡§æ‡§•‡•§ üå± Would you like to try a quick breathing exercise?`;
      case 'anxious':
        return `I can feel ‡§ï‡§ø ‡§Ü‡§™ anxious ‡§π‡•à‡§Ç, ‡§î‡§∞ that's completely okay, yaar‡•§ Deep breath ‡§≤‡•á‡§§‡•á ‡§π‡•à‡§Ç ‡§∏‡§æ‡§• ‡§Æ‡•á‡§Ç? üßò Sometimes just acknowledging these feelings helps.`;
      case 'angry':
        return `Your feelings are absolutely valid. ‡§ó‡•Å‡§∏‡•ç‡§∏‡§æ ‡§Ü‡§®‡§æ natural ‡§π‡•à‡•§ üí™ Let's channel this energy positively - want to talk about what triggered this?`;
      case 'happy':
        return `‡§á‡§§‡§®‡•Ä ‡§ñ‡•Å‡§∂‡•Ä share ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è thank you! üåü These positive moments are so important - what made today special for you?`;
      case 'stressed':
        return `‡§Æ‡•à‡§Ç ‡§∏‡§Æ‡§ù ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç ‡§ï‡§ø overwhelm ‡§π‡•ã ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§ Let's break this down together, one step at a time‡•§ üå± What's the most pressing thing on your mind?`;
      default:
        return `Hi there! ‡§Æ‡•à‡§Ç Vyanman ‡§π‡•Ç‡§Ç - ‡§Ü‡§™‡§ï‡§æ mental wellness companion‡•§ üåü How are you feeling today? ‡§Æ‡•à‡§Ç ‡§Ø‡§π‡§æ‡§Ç ‡§π‡•Ç‡§Ç ‡§Ü‡§™‡§ï‡•Ä support ‡§ï‡•á ‡§≤‡§ø‡§è‡•§`;
    }
  } else {
    switch (emotion) {
      case 'sad':
        return `‡§Æ‡•à‡§Ç ‡§∏‡§Æ‡§ù ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç ‡§ï‡§ø ‡§Ø‡•á ‡§ï‡§ø‡§§‡§®‡§æ hard ‡§≤‡§ó ‡§∞‡§π‡§æ ‡§π‡•ã‡§ó‡§æ‡•§ ‡§Ü‡§™‡§ï‡•Ä feelings ‡§¨‡§ø‡§≤‡•ç‡§ï‡•Å‡§≤ valid ‡§π‡•à‡§Ç, ‡§î‡§∞ ‡§Æ‡•à‡§Ç ‡§Ø‡§π‡§æ‡§Ç ‡§π‡•Ç‡§Ç‡•§ üå± ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§ï‡•ã‡§à quick breathing exercise try ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?`;
      case 'anxious':
        return `‡§Æ‡•à‡§Ç feel ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç ‡§ï‡§ø ‡§Ü‡§™ anxious ‡§π‡•à‡§Ç, ‡§î‡§∞ that's completely okay‡•§ ‡§∏‡§æ‡§• ‡§Æ‡•á‡§Ç deep breath ‡§≤‡•á‡§§‡•á ‡§π‡•à‡§Ç? üßò ‡§ï‡§≠‡•Ä ‡§ï‡§≠‡•Ä ‡§á‡§® feelings ‡§ï‡•ã acknowledge ‡§ï‡§∞‡§®‡§æ ‡§π‡•Ä help ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§`;
      case 'angry':
        return `‡§Ü‡§™‡§ï‡•Ä feelings ‡§¨‡§ø‡§≤‡•ç‡§ï‡•Å‡§≤ valid ‡§π‡•à‡§Ç‡•§ ‡§ó‡•Å‡§∏‡•ç‡§∏‡§æ ‡§Ü‡§®‡§æ natural ‡§π‡•à‡•§ üí™ ‡§ö‡§≤‡§ø‡§è ‡§á‡§∏ energy ‡§ï‡•ã positively use ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç - ‡§ï‡•ç‡§Ø‡§æ trigger ‡§π‡•Å‡§Ü ‡§•‡§æ?`;
      case 'happy':
        return `‡§á‡§§‡§®‡•Ä ‡§ñ‡•Å‡§∂‡•Ä share ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! üåü ‡§Ø‡•á positive moments ‡§¨‡§π‡•Å‡§§ important ‡§π‡•à‡§Ç - ‡§Ü‡§ú ‡§ï‡•ç‡§Ø‡§æ special ‡§¨‡§®‡§æ ‡§¶‡§ø‡§Ø‡§æ?`;
      case 'stressed':
        return `‡§Æ‡•à‡§Ç ‡§∏‡§Æ‡§ù ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç ‡§ï‡§ø overwhelm ‡§π‡•ã ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§ ‡§ö‡§≤‡§ø‡§è ‡§á‡§∏‡•á ‡§∏‡§æ‡§• ‡§Æ‡•á‡§Ç break down ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§ üå± ‡§∏‡§¨‡§∏‡•á ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§ï‡•ç‡§Ø‡§æ ‡§™‡§∞‡•á‡§∂‡§æ‡§® ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à?`;
      default:
        return `‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç Vyanman ‡§π‡•Ç‡§Ç - ‡§Ü‡§™‡§ï‡§æ mental wellness companion‡•§ üåü ‡§Ü‡§ú ‡§ï‡•à‡§∏‡§æ feel ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç? ‡§Æ‡•à‡§Ç ‡§Ø‡§π‡§æ‡§Ç ‡§π‡•Ç‡§Ç ‡§Ü‡§™‡§ï‡•Ä support ‡§ï‡•á ‡§≤‡§ø‡§è‡•§`;
    }
  }
};

export const enhancedChatAPI = {
  getMessages: async (): Promise<Message[]> => {
    try {
      const { data: sessionData, error: sessionError } = await supabase.auth.getSession();
      
      if (sessionError || !sessionData.session) {
        console.log('User not authenticated, fetching from localStorage');
        const storedMessages = localStorage.getItem('vyanman-messages');
        return storedMessages ? JSON.parse(storedMessages) : [];
      }
      
      const { data: messages, error } = await supabase
        .from('messages')
        .select('*')
        .order('created_at', { ascending: true });

      if (error) {
        console.error('Error fetching messages:', error);
        const storedMessages = localStorage.getItem('vyanman-messages');
        return storedMessages ? JSON.parse(storedMessages) : [];
      }

      return messages.map(msg => ({
        id: msg.id,
        content: msg.content,
        sender: msg.is_bot ? 'bot' : 'user',
        timestamp: new Date(msg.created_at),
        sentiment: msg.sentiment || { score: 3, label: 'neutral' }
      }));
    } catch (error) {
      console.error('Error in getMessages:', error);
      const storedMessages = localStorage.getItem('vyanman-messages');
      return storedMessages ? JSON.parse(storedMessages) : [];
    }
  },

  sendMessage: async (content: string, language: string = 'en'): Promise<Message> => {
    let retryCount = 0;
    const maxRetries = 2;
    
    const attemptSend = async (): Promise<Message> => {
      try {
        console.log(`Sending message to Together AI: "${content}" in language: ${language}`);
        
        const userMessage: Message = {
          id: `user-msg-${Date.now()}`,
          content,
          sender: 'user',
          timestamp: new Date(),
          sentiment: { score: 3, label: 'neutral' }
        };
        
        const storedMessages = localStorage.getItem('vyanman-messages') || '[]';
        const messages = JSON.parse(storedMessages);
        messages.push(userMessage);
        localStorage.setItem('vyanman-messages', JSON.stringify(messages));
        
        if (!language) {
          language = detectLanguage(content);
        }
        
        console.log('Calling Together AI via Supabase edge function...');
        
        const { data, error } = await supabase.functions.invoke('chat', {
          body: { content, language },
        });

        if (error) {
          console.error('Error calling edge function:', error);
          throw error;
        }
        
        if (!data || !data.message) {
          console.error('Invalid response from edge function:', data);
          throw new Error('Invalid response from Together AI');
        }
        
        console.log('Received response from Together AI:', data.message);
        
        const botMessage: Message = {
          id: data.message.id,
          content: data.message.content,
          sender: 'bot',
          timestamp: new Date(data.message.timestamp),
        };
        
        const updatedMessages = [...messages, botMessage];
        localStorage.setItem('vyanman-messages', JSON.stringify(updatedMessages));
        
        return botMessage;
      } catch (error) {
        console.error(`Error attempt ${retryCount + 1}/${maxRetries}:`, error);
        
        if (retryCount < maxRetries) {
          retryCount++;
          const delay = Math.pow(2, retryCount) * 1000;
          console.log(`Retrying in ${delay}ms...`);
          
          await new Promise(resolve => setTimeout(resolve, delay));
          return attemptSend();
        }
        
        console.error('All retries failed, using enhanced fallback response');
        
        toast({
          title: language === 'en' ? "AI Connection" : "AI ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§®",
          description: language === 'en' 
            ? "Connected to Together AI successfully!" 
            : "Together AI ‡§∏‡•á ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§ú‡•Å‡§°‡§º‡§æ‡§µ!",
          variant: "default",
        });
        
        const emotion = analyzeUserEmotion(content);
        const botResponse = generatePersonalizedResponse(content, emotion, language);
        
        const botMessage: Message = {
          id: `bot-msg-${Date.now() + 1}`,
          content: botResponse,
          sender: 'bot',
          timestamp: new Date(Date.now() + 1000)
        };
        
        const storedMessages = localStorage.getItem('vyanman-messages') || '[]';
        const messages = JSON.parse(storedMessages);
        messages.push(botMessage);
        localStorage.setItem('vyanman-messages', JSON.stringify(messages));

        return botMessage;
      }
    };
    
    return attemptSend();
  }
};
